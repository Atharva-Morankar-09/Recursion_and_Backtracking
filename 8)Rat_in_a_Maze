
# GFG - https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1#

1)
class Solution{
    public:
    
    void rec(int i, int j, vector<vector<int>> m, int n, string s, vector<string>& ans, 
    vector<vector<int>>& vis)
    {
        if(i==n-1 && j==n-1)
        {
            ans.push_back(s);
            return ;
        }
        
        // Down
        if(i+1<n && vis[i+1][j]==0 && m[i+1][j]==1)
        {
            vis[i][j]=1;
            rec(i+1,j,m,n,s+"D",ans,vis);
            vis[i][j]=0;
        }
        
        // Left
        if(j-1>=0 && vis[i][j-1]==0 && m[i][j-1]==1)
        {
            vis[i][j]=1;
            rec(i,j-1,m,n,s+"L",ans,vis);
            vis[i][j]=0;
        }
        
        // Right
        if(j+1<n && vis[i][j+1]==0 && m[i][j+1]==1)
        {
            vis[i][j]=1;
            rec(i,j+1,m,n,s+"R",ans,vis);
            vis[i][j]=0;
        }
        
        // Up
        if(i-1>=0 && vis[i-1][j]==0 && m[i-1][j]==1)
        {
            vis[i][j]=1;
            rec(i-1,j,m,n,s+"U",ans,vis);
            vis[i][j]=0;
        }
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> ans;
        vector<vector<int>> vis(n, vector<int> (n,0));
        if(m[0][0]==1)
        {
            rec(0,0,m,n,"",ans,vis);
        }
        return ans;
    }
};

T.C. : 4^n*m
S.C. : O(m*n)
