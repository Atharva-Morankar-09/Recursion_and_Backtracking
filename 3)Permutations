
#Number Permutations(Leetcode):

class Solution {
public:
    
    void rec(vector<int>& sub, vector<vector<int>>& ans, vector<int>& vis, vector<int> nums)
    {
        if(sub.size()==nums.size())
        {
            ans.push_back(sub);
            return ;
        }
        
        for(int i=0;i<nums.size();i++)
        {
            if(vis[i]==0)
            {
                sub.push_back(nums[i]);
                vis[i]=1;
                rec(sub,ans,vis,nums);
                vis[i]=0;
                sub.pop_back();
            }
        }
    }
    
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> sub;
        vector<int> vis(nums.size(),0);
        rec(sub,ans,vis,nums);
       return ans; 
    }
};

T.C. : n! x n
S.C. : O(n)

class Solution {
public:
    
    void rec(int ind, vector<vector<int>>& ans, vector<int> nums)
    {
        if(ind==nums.size())
        {
            ans.push_back(nums);
            return ;
        }
        
        for(int i=ind;i<nums.size();i++)
        {
            swap(nums[i],nums[ind]);
            rec(ind+1,ans,nums);
            swap(nums[i],nums[ind]);
        }
    }
    
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        rec(0,ans,nums);
        return ans;
    }
};

T.C. : n! x n
S.C. : Only auxillary space

/*
vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        do{
            ans.push_back(nums);
        }while(next_permutation(nums.begin(),nums.end()));
       return ans; 
*/
